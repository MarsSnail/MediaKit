/*
 * MediaParser.cpp
 *
 *  Created on: 2013-9-3
 *      Author: lxn
 */
#include "MediaParser.h"
#include <memory>
#include <boost/bind.hpp>
#include "IOChannel.h"
#include "SnailSleep.h"
using namespace std;

namespace snail{
namespace media{

MediaParser::MediaParser(IOChannel *stream):
	_inputStream(stream),
	_bufferTime(100), //millsecond
	_bytesLoaded(0),
	_parseComplete(0),
	_seekRequest(false),
	_parserThread(0),
	_parserThreadStartBarrier(2),
	_parserThreadKillRequest(false),
	_hasVideo(false),
	_hasAudio(false),
	_videoWidth(0),
	_videoHeight(0),
	_videoDuration(0),
	_videoFramerate(0),
	 _videoAudioSamplerate(0)
{
}

MediaParser::~MediaParser(){

}
void MediaParser::setBufferTime(uint64_t bufferTime){
	boost::mutex::scoped_lock lock(_bufferTimeMutex);
	_bufferTime = bufferTime;
}
uint64_t MediaParser::getBufferTime() const {
	boost::mutex::scoped_lock lock(_bufferTimeMutex);
	return _bufferTime;
}
void MediaParser::waitIfNeeded(boost::mutex::scoped_lock& lock){
	bool pc = parseComplete();
	bool bf = bufferFull();
	if( (pc || bf)&&(!parserThreadKillRequested())){
		_parserThreadWakeup.wait(lock);
	}
}

//parser thread
void MediaParser::startParserThread(){
	_parserThread.reset(new boost::thread(
			boost::bind(parserLoopStart, this)));
	_parserThreadStartBarrier.wait();
}

void MediaParser::parserLoopStart(MediaParser *mp){
	mp->parserLoop();
}

void MediaParser::parserLoop(){
	_parserThreadStartBarrier.wait();
	while(!parserThreadKillRequested()){
		parseNextChunk();
		boost::mutex::scoped_lock lock(_packetsQueueMutex);
		waitIfNeeded(lock);
	}
}
bool MediaParser::parserThreadKillRequested(){
	boost::mutex::scoped_lock lock(_parserThreadRunFlag);
	return _parserThreadKillRequest;
}
void MediaParser::requestParserThreadKill(){
	boost::mutex::scoped_lock lock(_parserThreadRunFlag);
	_parserThreadKillRequest = true;
	_parserThreadWakeup.notify_all();
}

//v
void MediaParser::notifyParserThread(){
	_parserThreadWakeup.notify_all();
}
//get video/audio configuer information
int MediaParser::getVideoWidth() const{
	return _videoWidth;
}
int MediaParser::getVideoHeight() const{
	return _videoHeight;
}
double MediaParser::getFramerate() const{
	return _videoFramerate;
}
int64_t MediaParser::getDuration() const{
	return _videoDuration/1000LL;
}
}//namespace media
}//namespace snail
