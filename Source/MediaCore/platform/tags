!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
LittleFunc	ThreadTimersManager.h	/^	class LittleFunc{$/;"	c	class:timer::ThreadTimersManager
MainThreadSharedTimer	SharedTimer.h	/^	class MainThreadSharedTimer : public SharedTimer {$/;"	c	namespace:timer
PriorityHeap	ThreadTimersManager.h	/^	typedef priority_queue<TimerBase*, vector<TimerBase*>, LittleFunc> PriorityHeap;$/;"	t	class:timer::ThreadTimersManager
SharedTimer	SharedTimer.h	/^	    SharedTimer() { }$/;"	f	class:timer::SharedTimer
SharedTimer	SharedTimer.h	/^	class SharedTimer {$/;"	c	namespace:timer
SharedTimer_h	SharedTimer.h	2;"	d
ThreadGlobalData	ThreadGlobalData.h	/^class ThreadGlobalData{$/;"	c	namespace:timer
ThreadGlobalData_h	ThreadGlobalData.h	2;"	d
ThreadTimersManager	ThreadTimersManager.cpp	/^ThreadTimersManager::ThreadTimersManager(bool isMainThread):$/;"	f	class:timer::ThreadTimersManager
ThreadTimersManager	ThreadTimersManager.h	/^class ThreadTimersManager{$/;"	c	namespace:timer
ThreadTimersManager_h	ThreadTimersManager.h	2;"	d
Timer	Timer.h	/^Timer<T>::Timer(T* const obj, Timer<T>::TimerFunc func):$/;"	f	class:timer::Timer
Timer	Timer.h	/^class Timer : public TimerBase{$/;"	c	namespace:timer
TimerBase	Timer.cpp	/^TimerBase::TimerBase():$/;"	f	class:timer::TimerBase
TimerBase	Timer.h	/^class TimerBase{$/;"	c	namespace:timer
TimerFunc	Timer.h	/^	typedef void(T::* TimerFunc)(Timer<T>*);$/;"	t	class:timer::Timer
TimerTest	unitTest/timer_unittest.cpp	/^TimerTest::TimerTest():$/;"	f	class:TimerTest
TimerTest	unitTest/timer_unittest.cpp	/^class TimerTest{$/;"	c	file:
Timer_h	Timer.h	2;"	d
_addOrder	Timer.h	/^	unsigned _addOrder;$/;"	m	class:timer::TimerBase
_fireTime	Timer.h	/^	double _fireTime;$/;"	m	class:timer::TimerBase
_firingTimer	ThreadTimersManager.h	/^	bool _firingTimer;	$/;"	m	class:timer::ThreadTimersManager
_func	Timer.h	/^	TimerFunc _func;$/;"	m	class:timer::Timer
_heap	Timer.h	/^	ThreadTimersManager::PriorityHeap *_heap;\/\/this is a global Var$/;"	m	class:timer::TimerBase
_nextInterval	Timer.h	/^	double _nextInterval;$/;"	m	class:timer::TimerBase
_obj	Timer.h	/^	T* const _obj;$/;"	m	class:timer::Timer
_pendingNextSharedTimerFireTime	ThreadTimersManager.h	/^	double _pendingNextSharedTimerFireTime;$/;"	m	class:timer::ThreadTimersManager
_repeatInterval	Timer.h	/^	double _repeatInterval;$/;"	m	class:timer::TimerBase
_sharedTimer	ThreadTimersManager.h	/^	SharedTimer *_sharedTimer;	$/;"	m	class:timer::ThreadTimersManager
_threadTimersManager	ThreadGlobalData.h	/^	ThreadTimersManager _threadTimersManager;$/;"	m	class:timer::ThreadGlobalData
_timer	unitTest/timer_unittest.cpp	/^	Timer<TimerTest> _timer;$/;"	m	class:TimerTest	file:
_timersHeap	ThreadTimersManager.h	/^	PriorityHeap  _timersHeap;$/;"	m	class:timer::ThreadTimersManager
_tmp	Timer.h	/^	int *_tmp;$/;"	m	class:timer::TimerBase
addTimers	unitTest/timer_unittest.cpp	/^void TimerTest::addTimers(double t){$/;"	f	class:TimerTest
fire	Timer.cpp	/^void TimerBase::fire(){$/;"	f	class:timer::TimerBase
fire	Timer.h	/^void Timer<T>::fire(){$/;"	f	class:timer::Timer
fireFunc	unitTest/timer_unittest.cpp	/^void TimerTest::fireFunc(Timer<TimerTest> *timer){$/;"	f	class:TimerTest
func	linux/SharedTimerLinux.cpp	/^	static void (*func)(void);$/;"	m	namespace:timer	file:
gThreadGlobalData	ThreadGlobalData.h	/^static ThreadGlobalData *gThreadGlobalData;$/;"	m	namespace:timer
isActive	Timer.cpp	/^bool TimerBase::isActive(){$/;"	f	class:timer::TimerBase
main	unitTest/timer_unittest.cpp	/^int main(int argc, char **argv){$/;"	f
mainThreadSharedTimer	ThreadTimersManager.cpp	/^SharedTimer* mainThreadSharedTimer(){$/;"	f	namespace:timer
maxSliceOfFireTimers	ThreadTimersManager.cpp	/^const double maxSliceOfFireTimers = 0.05; \/\/second$/;"	m	namespace:timer	file:
nextFireTime	Timer.cpp	/^double TimerBase::nextFireTime() 	  { return _fireTime; }$/;"	f	class:timer::TimerBase
operator ()	ThreadTimersManager.cpp	/^bool ThreadTimersManager::LittleFunc::operator()(TimerBase *t1, TimerBase *t2) const {$/;"	f	class:timer::ThreadTimersManager::LittleFunc
order	Timer.cpp	/^unsigned TimerBase::order() { return _addOrder;}$/;"	f	class:timer::TimerBase
popSelf	Timer.cpp	/^void TimerBase::popSelf(){$/;"	f	class:timer::TimerBase
pushSelf	Timer.cpp	/^void TimerBase::pushSelf(){$/;"	f	class:timer::TimerBase
repeatInterval	Timer.cpp	/^double TimerBase::repeatInterval()   { return _repeatInterval; }$/;"	f	class:timer::TimerBase
setFireTime	Timer.cpp	/^void TimerBase::setFireTime(double fireTime){$/;"	f	class:timer::TimerBase
setFiredFunction	SharedTimer.h	/^		virtual void setFiredFunction(void (*func)(void)){$/;"	f	class:timer::MainThreadSharedTimer
setFiredInterval	SharedTimer.h	/^		virtual void setFiredInterval(double interval){$/;"	f	class:timer::MainThreadSharedTimer
setSharedTimer	ThreadTimersManager.cpp	/^void ThreadTimersManager::setSharedTimer(SharedTimer *sharedTimer){$/;"	f	class:timer::ThreadTimersManager
setSharedTimerFiredFunction	linux/SharedTimerLinux.cpp	/^	void setSharedTimerFiredFunction(void (*f)()){$/;"	f	namespace:timer
setSharedTimerFiredInterval	linux/SharedTimerLinux.cpp	/^	void setSharedTimerFiredInterval(double interval){$/;"	f	namespace:timer
sharedTimerFired	ThreadTimersManager.cpp	/^void ThreadTimersManager::sharedTimerFired(){$/;"	f	class:timer::ThreadTimersManager
sharedTimerFiredInterval	ThreadTimersManager.cpp	/^void ThreadTimersManager::sharedTimerFiredInterval(){$/;"	f	class:timer::ThreadTimersManager
signalCB	linux/SharedTimerLinux.cpp	/^	void signalCB(int id){$/;"	f	namespace:timer
start	Timer.cpp	/^void TimerBase::start(double nextInterval, double repeatInterval){$/;"	f	class:timer::TimerBase
startOneShot	Timer.cpp	/^void TimerBase::startOneShot(double nextInterval){ start(nextInterval, 0); }$/;"	f	class:timer::TimerBase
stop	SharedTimer.h	/^		virtual void stop(){$/;"	f	class:timer::MainThreadSharedTimer
stopSharedTimer	linux/SharedTimerLinux.cpp	/^	void stopSharedTimer(){$/;"	f	namespace:timer
threadGlobalData	ThreadGlobalData.cpp	/^ThreadGlobalData* threadGlobalData(){$/;"	f	namespace:timer
threadTimersManager	ThreadGlobalData.h	/^	ThreadTimersManager*	threadTimersManager(){ return &_threadTimersManager;}	$/;"	f	class:timer::ThreadGlobalData
timer	SharedTimer.h	/^namespace timer{$/;"	n
timer	ThreadGlobalData.cpp	/^namespace timer{$/;"	n	file:
timer	ThreadGlobalData.h	/^namespace timer{$/;"	n
timer	ThreadTimersManager.cpp	/^namespace timer{$/;"	n	file:
timer	ThreadTimersManager.h	/^namespace timer{$/;"	n
timer	Timer.cpp	/^namespace timer{$/;"	n	file:
timer	Timer.h	/^namespace timer{$/;"	n
timer	linux/SharedTimerLinux.cpp	/^namespace timer {$/;"	n	file:
timersHeap	ThreadTimersManager.h	/^	PriorityHeap& timersHeap(){return _timersHeap;}$/;"	f	class:timer::ThreadTimersManager
updateSharedTimer	ThreadTimersManager.cpp	/^void ThreadTimersManager::updateSharedTimer(){$/;"	f	class:timer::ThreadTimersManager
~SharedTimer	SharedTimer.h	/^	    virtual ~SharedTimer() { }$/;"	f	class:timer::SharedTimer
